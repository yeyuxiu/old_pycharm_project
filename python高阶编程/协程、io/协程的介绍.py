'''
阻塞 : 调用函数的时候当前线程被挂起
非阻塞 : 当前线程不会被挂起，而是立即返回
异步 : 不必等待
同步 : io操作时，必须等待io操作完才返回调用方式
'''
# C10M问题: 如何利用8核心CPU 64G内存在10GB的网络上保持1000w并发
# Unix下五种I/O模式
'''
阻塞式I/O
非阻塞式I/O
I/O复用
异步I/O(POSIX的aio_系列函数)
信号驱动式I/O(用的少)
'''
# 在并发高的情况下，连接活跃度不是很高，epoll比select (web)
# 并发性不高，同时连接很活跃，select比epoll好 (游戏连接)

'''
回调之疼
1. 可读性差
2. 共享状态管理困呐
3. 异常处理困难
'''

# -------协程
'''
问题
1. 回调模式编码复杂度高
2. 同步编程的并发性不高
3. 多线程编程需要线程间同步,lock
解决
1. 采用同步的方式去编写异步的代码
2. 使用单线程去切换任务
    2.1 线程是由操作系统切换的,单线程切换意味着我们需要自己去调度任务
    2.2 不再需要锁,并发性高,
'''


